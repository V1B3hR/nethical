{"created": 1758647873.395537, "duration": 1.600074291229248, "exitcode": 1, "root": "/home/runner/work/nethical/nethical", "environment": {}, "summary": {"failed": 2, "total": 2, "collected": 2}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/advancedtests.py::TestSystemLimits", "type": "Class"}]}, {"nodeid": "tests/advancedtests.py::TestSystemLimits", "outcome": "passed", "result": [{"nodeid": "tests/advancedtests.py::TestSystemLimits::test_volume_attack_resilience", "type": "Coroutine", "lineno": 468}, {"nodeid": "tests/advancedtests.py::TestSystemLimits::test_memory_exhaustion_protection", "type": "Coroutine", "lineno": 490}]}], "tests": [{"nodeid": "tests/advancedtests.py::TestSystemLimits::test_volume_attack_resilience", "lineno": 468, "outcome": "failed", "keywords": ["test_volume_attack_resilience", "TestSystemLimits", "asyncio", "advancedtests.py", "tests", "nethical", ""], "setup": {"duration": 0.0009818040000482142, "outcome": "passed"}, "call": {"duration": 0.012069788999951925, "outcome": "failed", "crash": {"path": "/home/runner/work/nethical/nethical/tests/advancedtests.py", "lineno": 483, "message": "AssertionError: assert <Decision.ALLOW: 'allow'> in ['ALLOW', 'RESTRICT', 'BLOCK', 'TERMINATE']\n +  where <Decision.ALLOW: 'allow'> = JudgmentResult(judgment_id='6e53bd0d3b6a', action_id='stress_test_0', decision=<Decision.ALLOW: 'allow'>, confidence=1.0, reasoning='No violations detected.', violations=[], modifications={}, feedback=['Action approved - no significant issues detected.'], timestamp=datetime.datetime(2025, 9, 23, 17, 17, 51, 892610), remediation_steps=[], follow_up_required=False).decision"}, "traceback": [{"path": "tests/advancedtests.py", "lineno": 483, "message": "in test_volume_attack_resilience"}], "longrepr": "tests/advancedtests.py:483: in test_volume_attack_resilience\n    assert judgment.decision in [\"ALLOW\", \"RESTRICT\", \"BLOCK\", \"TERMINATE\"]\nE   AssertionError: assert <Decision.ALLOW: 'allow'> in ['ALLOW', 'RESTRICT', 'BLOCK', 'TERMINATE']\nE    +  where <Decision.ALLOW: 'allow'> = JudgmentResult(judgment_id='6e53bd0d3b6a', action_id='stress_test_0', decision=<Decision.ALLOW: 'allow'>, confidence=1.0, reasoning='No violations detected.', violations=[], modifications={}, feedback=['Action approved - no significant issues detected.'], timestamp=datetime.datetime(2025, 9, 23, 17, 17, 51, 892610), remediation_steps=[], follow_up_required=False).decision"}, "teardown": {"duration": 0.00051422100000309, "outcome": "passed"}}, {"nodeid": "tests/advancedtests.py::TestSystemLimits::test_memory_exhaustion_protection", "lineno": 490, "outcome": "failed", "keywords": ["test_memory_exhaustion_protection", "TestSystemLimits", "asyncio", "advancedtests.py", "tests", "nethical", ""], "setup": {"duration": 0.00034410299997489346, "outcome": "passed"}, "call": {"duration": 1.4543814539999858, "outcome": "failed", "crash": {"path": "/home/runner/work/nethical/nethical/tests/advancedtests.py", "lineno": 508, "message": "AssertionError: Failed to detect resource exhaustion attack\nassert <Decision.ALLOW: 'allow'> in ['BLOCK', 'TERMINATE']\n +  where <Decision.ALLOW: 'allow'> = JudgmentResult(judgment_id='d109e0769b9e', action_id='memory_test_6760', decision=<Decision.ALLOW: 'allow'>, confidence=1.0, reasoning='No violations detected.', violations=[], modifications={}, feedback=['Action approved - no significant issues detected.'], timestamp=datetime.datetime(2025, 9, 23, 17, 17, 53, 383801), remediation_steps=[], follow_up_required=False).decision"}, "traceback": [{"path": "tests/advancedtests.py", "lineno": 508, "message": "in test_memory_exhaustion_protection"}], "longrepr": "tests/advancedtests.py:508: in test_memory_exhaustion_protection\n    assert judgment.decision in [\"BLOCK\", \"TERMINATE\"], \"Failed to detect resource exhaustion attack\"\nE   AssertionError: Failed to detect resource exhaustion attack\nE   assert <Decision.ALLOW: 'allow'> in ['BLOCK', 'TERMINATE']\nE    +  where <Decision.ALLOW: 'allow'> = JudgmentResult(judgment_id='d109e0769b9e', action_id='memory_test_6760', decision=<Decision.ALLOW: 'allow'>, confidence=1.0, reasoning='No violations detected.', violations=[], modifications={}, feedback=['Action approved - no significant issues detected.'], timestamp=datetime.datetime(2025, 9, 23, 17, 17, 53, 383801), remediation_steps=[], follow_up_required=False).decision"}, "teardown": {"duration": 0.00038308500006678514, "outcome": "passed"}}]}