version: '3.8'

services:
  nethical:
    build:
      context: .
      dockerfile: Dockerfile
    image: nethical:latest
    container_name: nethical-governance
    environment:
      # Storage and data
      - NETHICAL_STORAGE_DIR=/data/nethical
      - NETHICAL_REGION_ID=us-east-1
      - NETHICAL_LOGICAL_DOMAIN=default
      
      # Feature flags
      - NETHICAL_ENABLE_MERKLE=true
      - NETHICAL_ENABLE_QUARANTINE=true
      - NETHICAL_ENABLE_QUOTA=true
      - NETHICAL_ENABLE_OTEL=true
      
      # Quota configuration
      - NETHICAL_REQUESTS_PER_SECOND=10.0
      - NETHICAL_MAX_PAYLOAD_BYTES=1000000
      
      # Privacy settings
      - NETHICAL_PRIVACY_MODE=differential
      - NETHICAL_EPSILON=1.0
      - NETHICAL_REDACTION_POLICY=aggressive
      
      # OpenTelemetry
      - OTEL_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=nethical
      
    volumes:
      - nethical-data:/data
      - ./correlation_rules.yaml:/app/correlation_rules.yaml:ro
      - ./ethics_taxonomy.json:/app/ethics_taxonomy.json:ro
    ports:
      - "8000:8000"
    networks:
      - nethical-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import nethical; print('healthy')"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Optional: Redis for caching and persistence
  redis:
    image: redis:7-alpine
    container_name: nethical-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - nethical-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Optional: OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: nethical-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4318:4318"   # OTLP HTTP
      - "4317:4317"   # OTLP gRPC
      - "8888:8888"   # Prometheus metrics
      - "13133:13133" # Health check
    networks:
      - nethical-network
    restart: unless-stopped

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: nethical-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - nethical-network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: nethical-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - nethical-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  nethical-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  nethical-network:
    driver: bridge
